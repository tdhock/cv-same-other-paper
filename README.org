** 6 Feb 2024

data-meta.R analyzes 

#+begin_src
       data.name memory.kb disk.kb  test train   rows features     test%
 1:        vowel        92      69   462   528    990       10 0.4666667
 2:     waveform       145     122   500   300    800       21 0.6250000
 3:         khan      2003    2210    25    63     88     2308 0.2840909
 4:         spam      2078     707  1536  3065   4601       57 0.3338405
 5:      zipUSPS     18752    9249  2007  7291   9298      256 0.2158529
 6:     14cancer     22546   11733    54   144    198    16063 0.2727273
 7:       EMNIST    429712  333360 10000 60000  70000      784 0.1428571
 8: FashionMNIST    429712  385816 10000 60000  70000      784 0.1428571
 9:       KMNIST    429712  313810 10000 60000  70000      784 0.1428571
10:        MNIST    429712  280627 10000 60000  70000      784 0.1428571
11:       QMNIST    736548  475002 60000 60000 120000      784 0.5000000
12:      CIFAR10   1441256 1879899 10000 50000  60000     3072 0.1666667
13:        STL10   2813121 3605146  8000  5000  13000    27648 0.6153846
#+end_src

** Motivation

- is the iid assumption verified in real data?
- train/test data sets
  - mlbench? no explicit train/test column, see [[file:mlbench.R]]
  - mlr3data https://mlr3data.mlr-org.com/ TODO
  - caret https://topepo.github.io/caret/data-sets.html segmentationData has Case column with values Train and Test. TODO
  - tidymodels https://modeldata.tidymodels.org/reference/index.html TODO
  - [[https://hastie.su.domains/ElemStatLearn/data.html][ESL2 data]] processed in [[file:data.R]]
  - list of image classification data sets: https://pytorch.org/vision/stable/datasets.html
  - pages like
    https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html#torchvision.datasets.MNIST
    often have a split arg.
  - https://github.com/pytorch/vision/tree/main/torchvision/datasets is source code.

Below we see about 10 torchvision data sets with train arg.

#+begin_src python
>>> torch.__version__
'1.13.0+cpu'
>>> import torchvision.datasets
>>> torchvision.__version__
'0.14.0+cpu'
>>> for data_name in dir(torchvision.datasets):
...     data_class = getattr(torchvision.datasets, data_name)
...     ann_dict = getattr(data_class.__init__, "__annotations__", {})
...     if "train" in ann_dict:
...         print(data_name)
CIFAR10
CIFAR100
FashionMNIST
HMDB51
KMNIST
Kitti
MNIST
PhotoTour
QMNIST
UCF101
USPS
#+end_src

newer versions show the same data sets.

Why doesn't Caltech101/256 show up above? no split/train arg.

Why doesn't CELEBA show up? it does have split arg.

split arg can be train/test/extra https://pytorch.org/vision/stable/generated/torchvision.datasets.SVHN.html#torchvision.datasets.SVHN

Some have both train and split https://pytorch.org/vision/stable/generated/torchvision.datasets.EMNIST.html#torchvision.datasets.EMNIST

classes instead of split https://pytorch.org/vision/stable/generated/torchvision.datasets.LSUN.html#torchvision.datasets.LSUN

exceptions / not parsed correctly:

#+begin_src python
{'STL10': ({'unlabeled', 'test', 'train+unlabeled', 'train'}, " One of {'train', 'test', 'unlabeled', 'train+unlabeled'}.\n            Accordingly, dataset is selected.\n")}
{'Cityscapes': (['fine', 'train', 'test', 'val', 'train', 'train_extra', 'val'], ' The image split to use, ``train``, ``test`` or ``val`` if mode="fine"\n            otherwise ``train``, ``train_extra`` or ``val``\n')}
{'EMNIST': (['byclass', 'bymerge', 'balanced', 'letters', 'digits', 'mnist'], ' The dataset has 6 different splits: ``byclass``, ``bymerge``,\n            ``balanced``, ``letters``, ``digits`` and ``mnist``. This argument specifies\n            which one to use.\n')}
{'LFWPairs': (['train', 'test', '10fold', '10fold'], ' The image split to use. Can be one of ``train``, ``test``,\n            ``10fold``. Defaults to ``10fold``.\n')}
{'MovingMNIST': (['train', 'test', 'None', 'split=None'], ' The dataset split, supports ``None`` (default), ``"train"`` and ``"test"``.\n            If ``split=None``, the full data is returned.\n')}
#+end_src
